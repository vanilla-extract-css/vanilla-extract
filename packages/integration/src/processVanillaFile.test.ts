import { stringifyExports } from './processVanillaFile';

describe('stringifyExports', () => {
  test('with plain object exports', () => {
    const recipeImports = new Set<string>();
    const value = {
      string: 'value',
      boolean: true,
      number: 42,
      array: [420],
      object: { hello: 'world' },
    };

    expect(stringifyExports(recipeImports, value, null)).toMatchInlineSnapshot(
      `"{string:'value','boolean':true,number:42,array:[420],object:{hello:'world'}}"`,
    );
  });

  // https://rollupjs.org/guide/en/#outputgeneratedcode -- see output.generatedCode.symbols
  // https://github.com/vitejs/vite/pull/5018
  // https://github.com/vitejs/vite/blob/757a92f1c7c4fa961ed963edd245df77382dfde6/packages/vite/src/node/build.ts#L466-L469
  test('with exports generated by Rollup', () => {
    const recipeImports = new Set<string>();
    const value = Object.freeze(
      Object.defineProperty(
        {
          __proto__: null,
          some: 'export',
        },
        Symbol.toStringTag,
        { value: 'Module' },
      ),
    );

    expect(stringifyExports(recipeImports, value, null)).toMatchInlineSnapshot(
      `"{some:'export'}"`,
    );
  });

  test('with unusedCompositionRegex', () => {
    const recipeImports = new Set<string>();
    const value = {
      string: `keep remove-me and-me dont-remove-me`,
      other: `keep remove-me and-me`,
      another: `keep remove-me dont-remove-me oh-no`,
    };

    expect(
      stringifyExports(recipeImports, value, /(remove-me|and-me)\s/g),
    ).toMatchInlineSnapshot(
      `"{string:'keep dont-remove-me',other:'keep and-me',another:'keep dont-oh-no'}"`,
      //                                            ^ these could be a problem ^
    );
  });
});
