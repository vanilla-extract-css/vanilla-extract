// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rollup-plugin should build with preserveModules 1`] = `
Array [
  Array [
    "assets/src/shared.css.ts.vanilla-31027048.css",
    ".shared__4dtfen0 {
  box-shadow: 0 0 5px red;
}
body {
  background-color: skyblue;
}",
  ],
  Array [
    "assets/src/styles.css.ts.vanilla-eb3ed277.css",
    "@font-face {
  src: local(\\"Impact\\");
  font-family: \\"styles__jteyb10\\";
}
@font-face {
  src: local(\\"Comic Sans MS\\");
  font-family: MyGlobalComicSans;
}
.styles__jteyb11 {
  display: flex;
  flex-direction: column;
  gap: var(--space-2__cvta174);
  padding: var(--space-3__cvta175);
}
.styles__jteyb12 {
  z-index: 1;
  position: relative;
}
.styles__jteyb13 {
  font-family: \\"styles__jteyb10\\";
  background-color: var(--colors-backgroundColor__cvta171, \\"THIS FALLBACK VALUE SHOULD NEVER BE USED\\");
  color: var(--colors-text__cvta172);
  border-radius: 9999px;
}
.themes__cvta176 .themes__cvta170 .styles__jteyb11 .styles__jteyb13 {
  font-family: MyGlobalComicSans;
  outline: 5px solid red;
}
body .styles__jteyb12:after {
  content: 'I am content';
}
html .styles_1\\\\/2__jteyb16 {
  opacity: var(--jteyb14, 0.5);
}
html .styles_1\\\\/4__jteyb17 {
  opacity: var(--jteyb14, var(--jteyb15, 0.25));
}
@media only screen and (min-width: 500px) {
  .styles__jteyb11 {
    border: 1px solid var(--colors-backgroundColor__cvta171);
  }
  .styles__jteyb13 {
    padding: var(--space-1__cvta173);
  }
}
@media only screen and (min-width: 1000px) {
  .styles__jteyb13 {
    padding: var(--space-2__cvta174);
  }
}",
  ],
  Array [
    "assets/src/themes.css.ts.vanilla-9cd4611f.css",
    ":root, .themes__cvta170 {
  --colors-backgroundColor__cvta171: blue;
  --colors-text__cvta172: white;
  --space-1__cvta173: 4px;
  --space-2__cvta174: 8px;
  --space-3__cvta175: 12px;
}
.themes__cvta176 {
  --colors-backgroundColor__cvta171: green;
  --colors-text__cvta172: white;
  --space-1__cvta173: 8px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 16px;
}
.themes__cvta177 {
  --colors-backgroundColor__cvta171: pink;
  --colors-text__cvta172: purple;
  --space-1__cvta173: 6px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 18px;
}
@media screen and (min-width: 768px) {
  .themes__cvta177 {
    --colors-backgroundColor__cvta171: purple;
    --colors-text__cvta172: pink;
  }
}",
  ],
  Array [
    "src/index.js",
    "import { assignInlineVars, setElementVars } from '@vanilla-extract/dynamic';
import { vars, altTheme, theme, responsiveTheme } from './themes.css.js';
import { container, button, opacity } from './styles.css.js';
import { shadow } from './shared.css.js';
import testNodes from '../test-nodes.json.js';

const inlineTheme = assignInlineVars(vars, {
  colors: {
    backgroundColor: \\"orange\\",
    text: \\"black\\"
  },
  space: {
    1: \\"4px\\",
    2: \\"8px\\",
    3: \\"12px\\"
  }
});
function render() {
  document.body.innerHTML = \`
  <div id=\\"\${testNodes.root}\\" class=\\"\${shadow}\\"> 
    Root theme
    <div id=\\"\${testNodes.rootContainer}\\" class=\\"\${container}\\">
      <button id=\\"\${testNodes.rootButton}\\" class=\\"\${button}\\">Main theme button</button>
      <div class=\\"\${altTheme}\\"> 
        Alt theme
        <div id=\\"\${testNodes.altContainer}\\" class=\\"\${container}\\">
          <button id=\\"\${testNodes.altButton}\\" class=\\"\${button}\\">Alt theme button</button>
          <div class=\\"\${theme}\\"> 
            Back to root theme
            <div id=\\"\${testNodes.nestedRootContainer}\\" class=\\"\${container}\\">
              <button id=\\"\${testNodes.nestedRootButton}\\" class=\\"\${button}\\">Main theme button</button>
            <div style=\\"\${inlineTheme}\\">
              Inline theme
                <div id=\\"\${testNodes.inlineThemeContainer}\\" class=\\"\${container}\\">
                  <button id=\\"\${testNodes.inlineThemeButton}\\" class=\\"\${button} \${opacity[\\"1/2\\"]}\\">Inline theme button</button>
                  <div>
                  Dynamic vars
                    <div id=\\"\${testNodes.dynamicVarsContainer}\\" class=\\"\${container}\\">
                      <button id=\\"\${testNodes.dynamicVarsButton}\\" class=\\"\${button}\\">Dynamic vars button</button>
                  <div class=\\"\${responsiveTheme}\\">
              Responsive theme
                <div id=\\"\${testNodes.responsiveThemeContainer}\\" class=\\"\${container}\\">
                  <button id=\\"\${testNodes.responsiveThemeButton}\\" class=\\"\${button}\\">Responsive theme button</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
\`;
  const dynamicVarsContainer = document.getElementById(testNodes.dynamicVarsContainer);
  if (!dynamicVarsContainer) {
    throw new Error(\\"Dynamic vars container not found.\\");
  }
  setElementVars(dynamicVarsContainer, vars, {
    colors: {
      backgroundColor: \\"transparent\\",
      text: \\"papayawhip\\"
    },
    space: {
      1: \\"5px\\",
      2: \\"10px\\",
      3: \\"15px\\"
    }
  });
  setElementVars(dynamicVarsContainer, {
    [vars.colors.backgroundColor]: \\"darksalmon\\"
  });
}
render();
",
  ],
  Array [
    "src/shared.css.js",
    "import './../assets/src/shared.css.ts.vanilla-31027048.css';

var shadow = \\"shared__4dtfen0\\";

export { shadow };
",
  ],
  Array [
    "src/styles.css.js",
    "import './../assets/src/shared.css.ts.vanilla-31027048.css';
import './../assets/src/themes.css.ts.vanilla-9cd4611f.css';
import './../assets/src/styles.css.ts.vanilla-eb3ed277.css';

var button = \\"styles__jteyb13 shared__4dtfen0 styles__jteyb12\\";
var container = \\"styles__jteyb11\\";
var opacity = {\\"1/2\\": \\"styles_1/2__jteyb16\\", \\"1/4\\": \\"styles_1/4__jteyb17\\"};

export { button, container, opacity };
",
  ],
  Array [
    "src/themes.css.js",
    "import './../assets/src/themes.css.ts.vanilla-9cd4611f.css';

var altTheme = \\"themes__cvta176\\";
var responsiveTheme = \\"themes__cvta177\\";
var theme = \\"themes__cvta170\\";
var vars = {colors: {backgroundColor: \\"var(--colors-backgroundColor__cvta171)\\", text: \\"var(--colors-text__cvta172)\\"}, space: {\\"1\\": \\"var(--space-1__cvta173)\\", \\"2\\": \\"var(--space-2__cvta174)\\", \\"3\\": \\"var(--space-3__cvta175)\\"}};

export { altTheme, responsiveTheme, theme, vars };
",
  ],
  Array [
    "test-nodes.json.js",
    "var root = \\"root\\";
var rootContainer = \\"rootContainer\\";
var rootButton = \\"rootButton\\";
var altContainer = \\"altContainer\\";
var altButton = \\"altButton\\";
var nestedRootContainer = \\"nestedRootContainer\\";
var nestedRootButton = \\"nestedRootButton\\";
var inlineThemeContainer = \\"inlineThemeContainer\\";
var inlineThemeButton = \\"inlineThemeButton\\";
var dynamicVarsContainer = \\"dynamicVarsContainer\\";
var dynamicVarsButton = \\"dynamicVarsButton\\";
var responsiveThemeContainer = \\"responsiveThemeContainer\\";
var responsiveThemeButton = \\"responsiveThemeButton\\";
var testNodes = {
	root: root,
	rootContainer: rootContainer,
	rootButton: rootButton,
	altContainer: altContainer,
	altButton: altButton,
	nestedRootContainer: nestedRootContainer,
	nestedRootButton: nestedRootButton,
	inlineThemeContainer: inlineThemeContainer,
	inlineThemeButton: inlineThemeButton,
	dynamicVarsContainer: dynamicVarsContainer,
	dynamicVarsButton: dynamicVarsButton,
	responsiveThemeContainer: responsiveThemeContainer,
	responsiveThemeButton: responsiveThemeButton
};

export { altButton, altContainer, testNodes as default, dynamicVarsButton, dynamicVarsContainer, inlineThemeButton, inlineThemeContainer, nestedRootButton, nestedRootContainer, responsiveThemeButton, responsiveThemeContainer, root, rootButton, rootContainer };
",
  ],
]
`;

exports[`rollup-plugin should build with preserveModules and assetFileNames 1`] = `
Array [
  Array [
    "index.js",
    "import { assignInlineVars, setElementVars } from '@vanilla-extract/dynamic';
import { vars, altTheme, theme, responsiveTheme } from './themes.css.js';
import { container, button, opacity } from './styles.css.js';
import { shadow } from './shared.css.js';
import testNodes from './test-nodes.json.js';

const inlineTheme = assignInlineVars(vars, {
  colors: {
    backgroundColor: \\"orange\\",
    text: \\"black\\"
  },
  space: {
    1: \\"4px\\",
    2: \\"8px\\",
    3: \\"12px\\"
  }
});
function render() {
  document.body.innerHTML = \`
  <div id=\\"\${testNodes.root}\\" class=\\"\${shadow}\\"> 
    Root theme
    <div id=\\"\${testNodes.rootContainer}\\" class=\\"\${container}\\">
      <button id=\\"\${testNodes.rootButton}\\" class=\\"\${button}\\">Main theme button</button>
      <div class=\\"\${altTheme}\\"> 
        Alt theme
        <div id=\\"\${testNodes.altContainer}\\" class=\\"\${container}\\">
          <button id=\\"\${testNodes.altButton}\\" class=\\"\${button}\\">Alt theme button</button>
          <div class=\\"\${theme}\\"> 
            Back to root theme
            <div id=\\"\${testNodes.nestedRootContainer}\\" class=\\"\${container}\\">
              <button id=\\"\${testNodes.nestedRootButton}\\" class=\\"\${button}\\">Main theme button</button>
            <div style=\\"\${inlineTheme}\\">
              Inline theme
                <div id=\\"\${testNodes.inlineThemeContainer}\\" class=\\"\${container}\\">
                  <button id=\\"\${testNodes.inlineThemeButton}\\" class=\\"\${button} \${opacity[\\"1/2\\"]}\\">Inline theme button</button>
                  <div>
                  Dynamic vars
                    <div id=\\"\${testNodes.dynamicVarsContainer}\\" class=\\"\${container}\\">
                      <button id=\\"\${testNodes.dynamicVarsButton}\\" class=\\"\${button}\\">Dynamic vars button</button>
                  <div class=\\"\${responsiveTheme}\\">
              Responsive theme
                <div id=\\"\${testNodes.responsiveThemeContainer}\\" class=\\"\${container}\\">
                  <button id=\\"\${testNodes.responsiveThemeButton}\\" class=\\"\${button}\\">Responsive theme button</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
\`;
  const dynamicVarsContainer = document.getElementById(testNodes.dynamicVarsContainer);
  if (!dynamicVarsContainer) {
    throw new Error(\\"Dynamic vars container not found.\\");
  }
  setElementVars(dynamicVarsContainer, vars, {
    colors: {
      backgroundColor: \\"transparent\\",
      text: \\"papayawhip\\"
    },
    space: {
      1: \\"5px\\",
      2: \\"10px\\",
      3: \\"15px\\"
    }
  });
  setElementVars(dynamicVarsContainer, {
    [vars.colors.backgroundColor]: \\"darksalmon\\"
  });
}
render();
",
  ],
  Array [
    "shared.css.js",
    "import './shared.css.ts.vanilla.css';

var shadow = \\"shared__4dtfen0\\";

export { shadow };
",
  ],
  Array [
    "shared.css.ts.vanilla.css",
    ".shared__4dtfen0 {
  box-shadow: 0 0 5px red;
}
body {
  background-color: skyblue;
}",
  ],
  Array [
    "styles.css.js",
    "import './shared.css.ts.vanilla.css';
import './themes.css.ts.vanilla.css';
import './styles.css.ts.vanilla.css';

var button = \\"styles__jteyb13 shared__4dtfen0 styles__jteyb12\\";
var container = \\"styles__jteyb11\\";
var opacity = {\\"1/2\\": \\"styles_1/2__jteyb16\\", \\"1/4\\": \\"styles_1/4__jteyb17\\"};

export { button, container, opacity };
",
  ],
  Array [
    "styles.css.ts.vanilla.css",
    "@font-face {
  src: local(\\"Impact\\");
  font-family: \\"styles__jteyb10\\";
}
@font-face {
  src: local(\\"Comic Sans MS\\");
  font-family: MyGlobalComicSans;
}
.styles__jteyb11 {
  display: flex;
  flex-direction: column;
  gap: var(--space-2__cvta174);
  padding: var(--space-3__cvta175);
}
.styles__jteyb12 {
  z-index: 1;
  position: relative;
}
.styles__jteyb13 {
  font-family: \\"styles__jteyb10\\";
  background-color: var(--colors-backgroundColor__cvta171, \\"THIS FALLBACK VALUE SHOULD NEVER BE USED\\");
  color: var(--colors-text__cvta172);
  border-radius: 9999px;
}
.themes__cvta176 .themes__cvta170 .styles__jteyb11 .styles__jteyb13 {
  font-family: MyGlobalComicSans;
  outline: 5px solid red;
}
body .styles__jteyb12:after {
  content: 'I am content';
}
html .styles_1\\\\/2__jteyb16 {
  opacity: var(--jteyb14, 0.5);
}
html .styles_1\\\\/4__jteyb17 {
  opacity: var(--jteyb14, var(--jteyb15, 0.25));
}
@media only screen and (min-width: 500px) {
  .styles__jteyb11 {
    border: 1px solid var(--colors-backgroundColor__cvta171);
  }
  .styles__jteyb13 {
    padding: var(--space-1__cvta173);
  }
}
@media only screen and (min-width: 1000px) {
  .styles__jteyb13 {
    padding: var(--space-2__cvta174);
  }
}",
  ],
  Array [
    "test-nodes.json.js",
    "var root = \\"root\\";
var rootContainer = \\"rootContainer\\";
var rootButton = \\"rootButton\\";
var altContainer = \\"altContainer\\";
var altButton = \\"altButton\\";
var nestedRootContainer = \\"nestedRootContainer\\";
var nestedRootButton = \\"nestedRootButton\\";
var inlineThemeContainer = \\"inlineThemeContainer\\";
var inlineThemeButton = \\"inlineThemeButton\\";
var dynamicVarsContainer = \\"dynamicVarsContainer\\";
var dynamicVarsButton = \\"dynamicVarsButton\\";
var responsiveThemeContainer = \\"responsiveThemeContainer\\";
var responsiveThemeButton = \\"responsiveThemeButton\\";
var testNodes = {
	root: root,
	rootContainer: rootContainer,
	rootButton: rootButton,
	altContainer: altContainer,
	altButton: altButton,
	nestedRootContainer: nestedRootContainer,
	nestedRootButton: nestedRootButton,
	inlineThemeContainer: inlineThemeContainer,
	inlineThemeButton: inlineThemeButton,
	dynamicVarsContainer: dynamicVarsContainer,
	dynamicVarsButton: dynamicVarsButton,
	responsiveThemeContainer: responsiveThemeContainer,
	responsiveThemeButton: responsiveThemeButton
};

export { altButton, altContainer, testNodes as default, dynamicVarsButton, dynamicVarsContainer, inlineThemeButton, inlineThemeContainer, nestedRootButton, nestedRootContainer, responsiveThemeButton, responsiveThemeContainer, root, rootButton, rootContainer };
",
  ],
  Array [
    "themes.css.js",
    "import './themes.css.ts.vanilla.css';

var altTheme = \\"themes__cvta176\\";
var responsiveTheme = \\"themes__cvta177\\";
var theme = \\"themes__cvta170\\";
var vars = {colors: {backgroundColor: \\"var(--colors-backgroundColor__cvta171)\\", text: \\"var(--colors-text__cvta172)\\"}, space: {\\"1\\": \\"var(--space-1__cvta173)\\", \\"2\\": \\"var(--space-2__cvta174)\\", \\"3\\": \\"var(--space-3__cvta175)\\"}};

export { altTheme, responsiveTheme, theme, vars };
",
  ],
  Array [
    "themes.css.ts.vanilla.css",
    ":root, .themes__cvta170 {
  --colors-backgroundColor__cvta171: blue;
  --colors-text__cvta172: white;
  --space-1__cvta173: 4px;
  --space-2__cvta174: 8px;
  --space-3__cvta175: 12px;
}
.themes__cvta176 {
  --colors-backgroundColor__cvta171: green;
  --colors-text__cvta172: white;
  --space-1__cvta173: 8px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 16px;
}
.themes__cvta177 {
  --colors-backgroundColor__cvta171: pink;
  --colors-text__cvta172: purple;
  --space-1__cvta173: 6px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 18px;
}
@media screen and (min-width: 768px) {
  .themes__cvta177 {
    --colors-backgroundColor__cvta171: purple;
    --colors-text__cvta172: pink;
  }
}",
  ],
]
`;

exports[`rollup-plugin should build with sourcemaps 1`] = `
Array [
  Array [
    "assets/src/shared.css.ts.vanilla-31027048.css",
    "",
  ],
  Array [
    "assets/src/styles.css.ts.vanilla-eb3ed277.css",
    "",
  ],
  Array [
    "assets/src/themes.css.ts.vanilla-9cd4611f.css",
    "",
  ],
  Array [
    "src/index.js",
    ";;;;;;AAKA,MAAM,WAAW,GAAG,gBAAgB,CAAC,IAAI,EAAE;AAC3C,EAAE,MAAM,EAAE;AACV,IAAI,eAAe,EAAE,QAAQ;AAC7B,IAAI,IAAI,EAAE,OAAO;AACjB,GAAG;AACH,EAAE,KAAK,EAAE;AACT,IAAI,CAAC,EAAE,KAAK;AACZ,IAAI,CAAC,EAAE,KAAK;AACZ,IAAI,CAAC,EAAE,MAAM;AACb,GAAG;AACH,CAAC,CAAC,CAAC;AACH,SAAS,MAAM,GAAG;AAClB,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC;AAC7B,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC;AAC9C;AACA,aAAa,EAAE,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC;AAC5D,kBAAkB,EAAE,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC;AAC3D,kBAAkB,EAAE,QAAQ,CAAC;AAC7B;AACA,iBAAiB,EAAE,SAAS,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC;AAC/D,sBAAsB,EAAE,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC;AAC9D,sBAAsB,EAAE,KAAK,CAAC;AAC9B;AACA,qBAAqB,EAAE,SAAS,CAAC,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC;AAC1E,0BAA0B,EAAE,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,MAAM,CAAC;AACzE,wBAAwB,EAAE,WAAW,CAAC;AACtC;AACA,yBAAyB,EAAE,SAAS,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,CAAC;AAC/E,8BAA8B,EAAE,SAAS,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AAChG;AACA;AACA,6BAA6B,EAAE,SAAS,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,CAAC;AACnF,kCAAkC,EAAE,SAAS,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC;AAClF,8BAA8B,EAAE,eAAe,CAAC;AAChD;AACA,yBAAyB,EAAE,SAAS,CAAC,wBAAwB,CAAC,SAAS,EAAE,SAAS,CAAC;AACnF,8BAA8B,EAAE,SAAS,CAAC,qBAAqB,CAAC,SAAS,EAAE,MAAM,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACF,EAAE,MAAM,oBAAoB,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;AACvF,EAAE,IAAI,CAAC,oBAAoB,EAAE;AAC7B,IAAI,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;AACzD,GAAG;AACH,EAAE,cAAc,CAAC,oBAAoB,EAAE,IAAI,EAAE;AAC7C,IAAI,MAAM,EAAE;AACZ,MAAM,eAAe,EAAE,aAAa;AACpC,MAAM,IAAI,EAAE,YAAY;AACxB,KAAK;AACL,IAAI,KAAK,EAAE;AACX,MAAM,CAAC,EAAE,KAAK;AACd,MAAM,CAAC,EAAE,MAAM;AACf,MAAM,CAAC,EAAE,MAAM;AACf,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,cAAc,CAAC,oBAAoB,EAAE;AACvC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,YAAY;AAC/C,GAAG,CAAC,CAAC;AACL,CAAC;AACD,MAAM,EAAE",
  ],
  Array [
    "src/shared.css.js",
    ";;;;;;",
  ],
  Array [
    "src/styles.css.js",
    ";;;;;;;;;;",
  ],
  Array [
    "src/themes.css.js",
    ";;;;;;;;;",
  ],
  Array [
    "test-nodes.json.js",
    ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  ],
]
`;

exports[`rollup-plugin should build without preserveModules 1`] = `
Array [
  Array [
    "assets/src/shared.css.ts.vanilla-31027048.css",
    ".shared__4dtfen0 {
  box-shadow: 0 0 5px red;
}
body {
  background-color: skyblue;
}",
  ],
  Array [
    "assets/src/styles.css.ts.vanilla-eb3ed277.css",
    "@font-face {
  src: local(\\"Impact\\");
  font-family: \\"styles__jteyb10\\";
}
@font-face {
  src: local(\\"Comic Sans MS\\");
  font-family: MyGlobalComicSans;
}
.styles__jteyb11 {
  display: flex;
  flex-direction: column;
  gap: var(--space-2__cvta174);
  padding: var(--space-3__cvta175);
}
.styles__jteyb12 {
  z-index: 1;
  position: relative;
}
.styles__jteyb13 {
  font-family: \\"styles__jteyb10\\";
  background-color: var(--colors-backgroundColor__cvta171, \\"THIS FALLBACK VALUE SHOULD NEVER BE USED\\");
  color: var(--colors-text__cvta172);
  border-radius: 9999px;
}
.themes__cvta176 .themes__cvta170 .styles__jteyb11 .styles__jteyb13 {
  font-family: MyGlobalComicSans;
  outline: 5px solid red;
}
body .styles__jteyb12:after {
  content: 'I am content';
}
html .styles_1\\\\/2__jteyb16 {
  opacity: var(--jteyb14, 0.5);
}
html .styles_1\\\\/4__jteyb17 {
  opacity: var(--jteyb14, var(--jteyb15, 0.25));
}
@media only screen and (min-width: 500px) {
  .styles__jteyb11 {
    border: 1px solid var(--colors-backgroundColor__cvta171);
  }
  .styles__jteyb13 {
    padding: var(--space-1__cvta173);
  }
}
@media only screen and (min-width: 1000px) {
  .styles__jteyb13 {
    padding: var(--space-2__cvta174);
  }
}",
  ],
  Array [
    "assets/src/themes.css.ts.vanilla-9cd4611f.css",
    ":root, .themes__cvta170 {
  --colors-backgroundColor__cvta171: blue;
  --colors-text__cvta172: white;
  --space-1__cvta173: 4px;
  --space-2__cvta174: 8px;
  --space-3__cvta175: 12px;
}
.themes__cvta176 {
  --colors-backgroundColor__cvta171: green;
  --colors-text__cvta172: white;
  --space-1__cvta173: 8px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 16px;
}
.themes__cvta177 {
  --colors-backgroundColor__cvta171: pink;
  --colors-text__cvta172: purple;
  --space-1__cvta173: 6px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 18px;
}
@media screen and (min-width: 768px) {
  .themes__cvta177 {
    --colors-backgroundColor__cvta171: purple;
    --colors-text__cvta172: pink;
  }
}",
  ],
  Array [
    "index.js",
    "import { assignInlineVars, setElementVars } from '@vanilla-extract/dynamic';
import './assets/src/themes.css.ts.vanilla-9cd4611f.css';
import './assets/src/shared.css.ts.vanilla-31027048.css';
import './assets/src/styles.css.ts.vanilla-eb3ed277.css';

var altTheme = \\"themes__cvta176\\";
var responsiveTheme = \\"themes__cvta177\\";
var theme = \\"themes__cvta170\\";
var vars = {colors: {backgroundColor: \\"var(--colors-backgroundColor__cvta171)\\", text: \\"var(--colors-text__cvta172)\\"}, space: {\\"1\\": \\"var(--space-1__cvta173)\\", \\"2\\": \\"var(--space-2__cvta174)\\", \\"3\\": \\"var(--space-3__cvta175)\\"}};

var button = \\"styles__jteyb13 shared__4dtfen0 styles__jteyb12\\";
var container = \\"styles__jteyb11\\";
var opacity = {\\"1/2\\": \\"styles_1/2__jteyb16\\", \\"1/4\\": \\"styles_1/4__jteyb17\\"};

var shadow = \\"shared__4dtfen0\\";

var root = \\"root\\";
var rootContainer = \\"rootContainer\\";
var rootButton = \\"rootButton\\";
var altContainer = \\"altContainer\\";
var altButton = \\"altButton\\";
var nestedRootContainer = \\"nestedRootContainer\\";
var nestedRootButton = \\"nestedRootButton\\";
var inlineThemeContainer = \\"inlineThemeContainer\\";
var inlineThemeButton = \\"inlineThemeButton\\";
var dynamicVarsContainer = \\"dynamicVarsContainer\\";
var dynamicVarsButton = \\"dynamicVarsButton\\";
var responsiveThemeContainer = \\"responsiveThemeContainer\\";
var responsiveThemeButton = \\"responsiveThemeButton\\";
var testNodes = {
	root: root,
	rootContainer: rootContainer,
	rootButton: rootButton,
	altContainer: altContainer,
	altButton: altButton,
	nestedRootContainer: nestedRootContainer,
	nestedRootButton: nestedRootButton,
	inlineThemeContainer: inlineThemeContainer,
	inlineThemeButton: inlineThemeButton,
	dynamicVarsContainer: dynamicVarsContainer,
	dynamicVarsButton: dynamicVarsButton,
	responsiveThemeContainer: responsiveThemeContainer,
	responsiveThemeButton: responsiveThemeButton
};

const inlineTheme = assignInlineVars(vars, {
  colors: {
    backgroundColor: \\"orange\\",
    text: \\"black\\"
  },
  space: {
    1: \\"4px\\",
    2: \\"8px\\",
    3: \\"12px\\"
  }
});
function render() {
  document.body.innerHTML = \`
  <div id=\\"\${testNodes.root}\\" class=\\"\${shadow}\\"> 
    Root theme
    <div id=\\"\${testNodes.rootContainer}\\" class=\\"\${container}\\">
      <button id=\\"\${testNodes.rootButton}\\" class=\\"\${button}\\">Main theme button</button>
      <div class=\\"\${altTheme}\\"> 
        Alt theme
        <div id=\\"\${testNodes.altContainer}\\" class=\\"\${container}\\">
          <button id=\\"\${testNodes.altButton}\\" class=\\"\${button}\\">Alt theme button</button>
          <div class=\\"\${theme}\\"> 
            Back to root theme
            <div id=\\"\${testNodes.nestedRootContainer}\\" class=\\"\${container}\\">
              <button id=\\"\${testNodes.nestedRootButton}\\" class=\\"\${button}\\">Main theme button</button>
            <div style=\\"\${inlineTheme}\\">
              Inline theme
                <div id=\\"\${testNodes.inlineThemeContainer}\\" class=\\"\${container}\\">
                  <button id=\\"\${testNodes.inlineThemeButton}\\" class=\\"\${button} \${opacity[\\"1/2\\"]}\\">Inline theme button</button>
                  <div>
                  Dynamic vars
                    <div id=\\"\${testNodes.dynamicVarsContainer}\\" class=\\"\${container}\\">
                      <button id=\\"\${testNodes.dynamicVarsButton}\\" class=\\"\${button}\\">Dynamic vars button</button>
                  <div class=\\"\${responsiveTheme}\\">
              Responsive theme
                <div id=\\"\${testNodes.responsiveThemeContainer}\\" class=\\"\${container}\\">
                  <button id=\\"\${testNodes.responsiveThemeButton}\\" class=\\"\${button}\\">Responsive theme button</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
\`;
  const dynamicVarsContainer = document.getElementById(testNodes.dynamicVarsContainer);
  if (!dynamicVarsContainer) {
    throw new Error(\\"Dynamic vars container not found.\\");
  }
  setElementVars(dynamicVarsContainer, vars, {
    colors: {
      backgroundColor: \\"transparent\\",
      text: \\"papayawhip\\"
    },
    space: {
      1: \\"5px\\",
      2: \\"10px\\",
      3: \\"15px\\"
    }
  });
  setElementVars(dynamicVarsContainer, {
    [vars.colors.backgroundColor]: \\"darksalmon\\"
  });
}
render();
",
  ],
]
`;
