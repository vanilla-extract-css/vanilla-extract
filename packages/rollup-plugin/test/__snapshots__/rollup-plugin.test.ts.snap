// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rollup-plugin should build with preserveModules 1`] = `
[
  [
    "assets/src/shared.css.ts.vanilla-G_Gyt4-e.css",
    ".shared_shadow__4dtfen0 {
  box-shadow: 0 0 5px red;
}
body {
  background-color: skyblue;
}
body, button {
  line-height: 16px;
}",
  ],
  [
    "assets/src/styles.css.ts.vanilla-C7NI1Ovc.css",
    "@font-face {
  src: local("Impact");
  font-family: "styles_impact__jteyb10";
}
@font-face {
  src: local("Comic Sans MS");
  font-family: MyGlobalComicSans;
}
.styles_container__jteyb11 {
  display: flex;
  flex-direction: column;
  gap: var(--space-2__cvta174);
  padding: var(--space-3__cvta175);
}
.styles_iDunno__jteyb12 {
  z-index: 1;
  position: relative;
}
.styles_button__jteyb13 {
  font-family: "styles_impact__jteyb10";
  background-color: var(--colors-backgroundColor__cvta171, "THIS FALLBACK VALUE SHOULD NEVER BE USED");
  color: var(--colors-text__cvta172);
  border-radius: 9999px;
}
.themes_altTheme__cvta176 .themes_theme__cvta170 .styles_container__jteyb11 .styles_button__jteyb13 {
  font-family: MyGlobalComicSans;
  outline: 5px solid red;
}
body .styles_iDunno__jteyb12:after {
  content: 'I am content';
}
html .styles_opacity_1\\/2__jteyb16 {
  opacity: var(--blankVar1__jteyb14, 0.5);
}
html .styles_opacity_1\\/4__jteyb17 {
  opacity: var(--blankVar1__jteyb14, var(--blankVar2__jteyb15, 0.25));
}
@media only screen and (min-width: 500px) {
  .styles_container__jteyb11 {
    border: 1px solid var(--colors-backgroundColor__cvta171);
  }
  .styles_button__jteyb13 {
    padding: var(--space-1__cvta173);
  }
}
@media only screen and (min-width: 1000px) {
  .styles_button__jteyb13 {
    padding: var(--space-2__cvta174);
  }
}",
  ],
  [
    "assets/src/themes.css.ts.vanilla-DMMXGwB8.css",
    ":root, .themes_theme__cvta170 {
  --colors-backgroundColor__cvta171: blue;
  --colors-text__cvta172: white;
  --space-1__cvta173: 4px;
  --space-2__cvta174: 8px;
  --space-3__cvta175: 12px;
}
.themes_altTheme__cvta176 {
  --colors-backgroundColor__cvta171: green;
  --colors-text__cvta172: white;
  --space-1__cvta173: 8px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 16px;
}
.themes_responsiveTheme__cvta177 {
  --colors-backgroundColor__cvta171: pink;
  --colors-text__cvta172: purple;
  --space-1__cvta173: 6px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 18px;
}
@media screen and (min-width: 768px) {
  .themes_responsiveTheme__cvta177 {
    --colors-backgroundColor__cvta171: purple;
    --colors-text__cvta172: pink;
  }
}",
  ],
  [
    "src/index.js",
    "import { assignInlineVars, setElementVars } from '@vanilla-extract/dynamic';
import { vars, altTheme, theme, responsiveTheme } from './themes.css.js';
import { container, button, opacity } from './styles.css.js';
import { shadow } from './shared.css.js';
import testNodes from '../test-nodes.json.js';

const inlineTheme = assignInlineVars(vars, {
  colors: {
    backgroundColor: "orange",
    text: "black"
  },
  space: {
    1: "4px",
    2: "8px",
    3: "12px"
  }
});
function render() {
  document.body.innerHTML = \`
  <div id="\${testNodes.root}" class="\${shadow}"> 
    Root theme
    <div id="\${testNodes.rootContainer}" class="\${container}">
      <button id="\${testNodes.rootButton}" class="\${button}">Main theme button</button>
      <div class="\${altTheme}"> 
        Alt theme
        <div id="\${testNodes.altContainer}" class="\${container}">
          <button id="\${testNodes.altButton}" class="\${button}">Alt theme button</button>
          <div class="\${theme}"> 
            Back to root theme
            <div id="\${testNodes.nestedRootContainer}" class="\${container}">
              <button id="\${testNodes.nestedRootButton}" class="\${button}">Main theme button</button>
            <div style="\${inlineTheme}">
              Inline theme
                <div id="\${testNodes.inlineThemeContainer}" class="\${container}">
                  <button id="\${testNodes.inlineThemeButton}" class="\${button} \${opacity["1/2"]}">Inline theme button</button>
                  <div>
                  Dynamic vars
                    <div id="\${testNodes.dynamicVarsContainer}" class="\${container}">
                      <button id="\${testNodes.dynamicVarsButton}" class="\${button}">Dynamic vars button</button>
                  <div class="\${responsiveTheme}">
              Responsive theme
                <div id="\${testNodes.responsiveThemeContainer}" class="\${container}">
                  <button id="\${testNodes.responsiveThemeButton}" class="\${button}">Responsive theme button</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
\`;
  const dynamicVarsContainer = document.getElementById(
    testNodes.dynamicVarsContainer
  );
  if (!dynamicVarsContainer) {
    throw new Error("Dynamic vars container not found.");
  }
  setElementVars(dynamicVarsContainer, vars, {
    colors: {
      backgroundColor: "transparent",
      text: "papayawhip"
    },
    space: {
      1: "5px",
      2: "10px",
      3: "15px"
    }
  });
  setElementVars(dynamicVarsContainer, {
    [vars.colors.backgroundColor]: "darksalmon"
  });
}
render();
",
  ],
  [
    "src/shared.css.js",
    "import './../assets/src/shared.css.ts.vanilla-G_Gyt4-e.css';

var shadow = "shared_shadow__4dtfen0";

export { shadow };
",
  ],
  [
    "src/styles.css.js",
    "import './../assets/src/shared.css.ts.vanilla-G_Gyt4-e.css';
import './../assets/src/themes.css.ts.vanilla-DMMXGwB8.css';
import './../assets/src/styles.css.ts.vanilla-C7NI1Ovc.css';

var button = "styles_button__jteyb13 shared_shadow__4dtfen0 styles_iDunno__jteyb12";
var container = "styles_container__jteyb11";
var opacity = { "1/2": "styles_opacity_1/2__jteyb16", "1/4": "styles_opacity_1/4__jteyb17" };

export { button, container, opacity };
",
  ],
  [
    "src/themes.css.js",
    "import './../assets/src/themes.css.ts.vanilla-DMMXGwB8.css';

var altTheme = "themes_altTheme__cvta176";
var responsiveTheme = "themes_responsiveTheme__cvta177";
var theme = "themes_theme__cvta170";
var vars = { colors: { backgroundColor: "var(--colors-backgroundColor__cvta171)", text: "var(--colors-text__cvta172)" }, space: { "1": "var(--space-1__cvta173)", "2": "var(--space-2__cvta174)", "3": "var(--space-3__cvta175)" } };

export { altTheme, responsiveTheme, theme, vars };
",
  ],
  [
    "test-nodes.json.js",
    "var root = "root";
var rootContainer = "rootContainer";
var rootButton = "rootButton";
var altContainer = "altContainer";
var altButton = "altButton";
var nestedRootContainer = "nestedRootContainer";
var nestedRootButton = "nestedRootButton";
var inlineThemeContainer = "inlineThemeContainer";
var inlineThemeButton = "inlineThemeButton";
var dynamicVarsContainer = "dynamicVarsContainer";
var dynamicVarsButton = "dynamicVarsButton";
var responsiveThemeContainer = "responsiveThemeContainer";
var responsiveThemeButton = "responsiveThemeButton";
var testNodes = {
	root: root,
	rootContainer: rootContainer,
	rootButton: rootButton,
	altContainer: altContainer,
	altButton: altButton,
	nestedRootContainer: nestedRootContainer,
	nestedRootButton: nestedRootButton,
	inlineThemeContainer: inlineThemeContainer,
	inlineThemeButton: inlineThemeButton,
	dynamicVarsContainer: dynamicVarsContainer,
	dynamicVarsButton: dynamicVarsButton,
	responsiveThemeContainer: responsiveThemeContainer,
	responsiveThemeButton: responsiveThemeButton
};

export { altButton, altContainer, testNodes as default, dynamicVarsButton, dynamicVarsContainer, inlineThemeButton, inlineThemeContainer, nestedRootButton, nestedRootContainer, responsiveThemeButton, responsiveThemeContainer, root, rootButton, rootContainer };
",
  ],
]
`;

exports[`rollup-plugin should build with preserveModules and assetFileNames 1`] = `
[
  [
    "index.js",
    "import { assignInlineVars, setElementVars } from '@vanilla-extract/dynamic';
import { vars, altTheme, theme, responsiveTheme } from './themes.css.js';
import { container, button, opacity } from './styles.css.js';
import { shadow } from './shared.css.js';
import testNodes from './test-nodes.json.js';

const inlineTheme = assignInlineVars(vars, {
  colors: {
    backgroundColor: "orange",
    text: "black"
  },
  space: {
    1: "4px",
    2: "8px",
    3: "12px"
  }
});
function render() {
  document.body.innerHTML = \`
  <div id="\${testNodes.root}" class="\${shadow}"> 
    Root theme
    <div id="\${testNodes.rootContainer}" class="\${container}">
      <button id="\${testNodes.rootButton}" class="\${button}">Main theme button</button>
      <div class="\${altTheme}"> 
        Alt theme
        <div id="\${testNodes.altContainer}" class="\${container}">
          <button id="\${testNodes.altButton}" class="\${button}">Alt theme button</button>
          <div class="\${theme}"> 
            Back to root theme
            <div id="\${testNodes.nestedRootContainer}" class="\${container}">
              <button id="\${testNodes.nestedRootButton}" class="\${button}">Main theme button</button>
            <div style="\${inlineTheme}">
              Inline theme
                <div id="\${testNodes.inlineThemeContainer}" class="\${container}">
                  <button id="\${testNodes.inlineThemeButton}" class="\${button} \${opacity["1/2"]}">Inline theme button</button>
                  <div>
                  Dynamic vars
                    <div id="\${testNodes.dynamicVarsContainer}" class="\${container}">
                      <button id="\${testNodes.dynamicVarsButton}" class="\${button}">Dynamic vars button</button>
                  <div class="\${responsiveTheme}">
              Responsive theme
                <div id="\${testNodes.responsiveThemeContainer}" class="\${container}">
                  <button id="\${testNodes.responsiveThemeButton}" class="\${button}">Responsive theme button</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
\`;
  const dynamicVarsContainer = document.getElementById(
    testNodes.dynamicVarsContainer
  );
  if (!dynamicVarsContainer) {
    throw new Error("Dynamic vars container not found.");
  }
  setElementVars(dynamicVarsContainer, vars, {
    colors: {
      backgroundColor: "transparent",
      text: "papayawhip"
    },
    space: {
      1: "5px",
      2: "10px",
      3: "15px"
    }
  });
  setElementVars(dynamicVarsContainer, {
    [vars.colors.backgroundColor]: "darksalmon"
  });
}
render();
",
  ],
  [
    "shared.css.js",
    "import './shared.css.ts.vanilla.css';

var shadow = "shared_shadow__4dtfen0";

export { shadow };
",
  ],
  [
    "shared.css.ts.vanilla.css",
    ".shared_shadow__4dtfen0 {
  box-shadow: 0 0 5px red;
}
body {
  background-color: skyblue;
}
body, button {
  line-height: 16px;
}",
  ],
  [
    "styles.css.js",
    "import './shared.css.ts.vanilla.css';
import './themes.css.ts.vanilla.css';
import './styles.css.ts.vanilla.css';

var button = "styles_button__jteyb13 shared_shadow__4dtfen0 styles_iDunno__jteyb12";
var container = "styles_container__jteyb11";
var opacity = { "1/2": "styles_opacity_1/2__jteyb16", "1/4": "styles_opacity_1/4__jteyb17" };

export { button, container, opacity };
",
  ],
  [
    "styles.css.ts.vanilla.css",
    "@font-face {
  src: local("Impact");
  font-family: "styles_impact__jteyb10";
}
@font-face {
  src: local("Comic Sans MS");
  font-family: MyGlobalComicSans;
}
.styles_container__jteyb11 {
  display: flex;
  flex-direction: column;
  gap: var(--space-2__cvta174);
  padding: var(--space-3__cvta175);
}
.styles_iDunno__jteyb12 {
  z-index: 1;
  position: relative;
}
.styles_button__jteyb13 {
  font-family: "styles_impact__jteyb10";
  background-color: var(--colors-backgroundColor__cvta171, "THIS FALLBACK VALUE SHOULD NEVER BE USED");
  color: var(--colors-text__cvta172);
  border-radius: 9999px;
}
.themes_altTheme__cvta176 .themes_theme__cvta170 .styles_container__jteyb11 .styles_button__jteyb13 {
  font-family: MyGlobalComicSans;
  outline: 5px solid red;
}
body .styles_iDunno__jteyb12:after {
  content: 'I am content';
}
html .styles_opacity_1\\/2__jteyb16 {
  opacity: var(--blankVar1__jteyb14, 0.5);
}
html .styles_opacity_1\\/4__jteyb17 {
  opacity: var(--blankVar1__jteyb14, var(--blankVar2__jteyb15, 0.25));
}
@media only screen and (min-width: 500px) {
  .styles_container__jteyb11 {
    border: 1px solid var(--colors-backgroundColor__cvta171);
  }
  .styles_button__jteyb13 {
    padding: var(--space-1__cvta173);
  }
}
@media only screen and (min-width: 1000px) {
  .styles_button__jteyb13 {
    padding: var(--space-2__cvta174);
  }
}",
  ],
  [
    "test-nodes.json.js",
    "var root = "root";
var rootContainer = "rootContainer";
var rootButton = "rootButton";
var altContainer = "altContainer";
var altButton = "altButton";
var nestedRootContainer = "nestedRootContainer";
var nestedRootButton = "nestedRootButton";
var inlineThemeContainer = "inlineThemeContainer";
var inlineThemeButton = "inlineThemeButton";
var dynamicVarsContainer = "dynamicVarsContainer";
var dynamicVarsButton = "dynamicVarsButton";
var responsiveThemeContainer = "responsiveThemeContainer";
var responsiveThemeButton = "responsiveThemeButton";
var testNodes = {
	root: root,
	rootContainer: rootContainer,
	rootButton: rootButton,
	altContainer: altContainer,
	altButton: altButton,
	nestedRootContainer: nestedRootContainer,
	nestedRootButton: nestedRootButton,
	inlineThemeContainer: inlineThemeContainer,
	inlineThemeButton: inlineThemeButton,
	dynamicVarsContainer: dynamicVarsContainer,
	dynamicVarsButton: dynamicVarsButton,
	responsiveThemeContainer: responsiveThemeContainer,
	responsiveThemeButton: responsiveThemeButton
};

export { altButton, altContainer, testNodes as default, dynamicVarsButton, dynamicVarsContainer, inlineThemeButton, inlineThemeContainer, nestedRootButton, nestedRootContainer, responsiveThemeButton, responsiveThemeContainer, root, rootButton, rootContainer };
",
  ],
  [
    "themes.css.js",
    "import './themes.css.ts.vanilla.css';

var altTheme = "themes_altTheme__cvta176";
var responsiveTheme = "themes_responsiveTheme__cvta177";
var theme = "themes_theme__cvta170";
var vars = { colors: { backgroundColor: "var(--colors-backgroundColor__cvta171)", text: "var(--colors-text__cvta172)" }, space: { "1": "var(--space-1__cvta173)", "2": "var(--space-2__cvta174)", "3": "var(--space-3__cvta175)" } };

export { altTheme, responsiveTheme, theme, vars };
",
  ],
  [
    "themes.css.ts.vanilla.css",
    ":root, .themes_theme__cvta170 {
  --colors-backgroundColor__cvta171: blue;
  --colors-text__cvta172: white;
  --space-1__cvta173: 4px;
  --space-2__cvta174: 8px;
  --space-3__cvta175: 12px;
}
.themes_altTheme__cvta176 {
  --colors-backgroundColor__cvta171: green;
  --colors-text__cvta172: white;
  --space-1__cvta173: 8px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 16px;
}
.themes_responsiveTheme__cvta177 {
  --colors-backgroundColor__cvta171: pink;
  --colors-text__cvta172: purple;
  --space-1__cvta173: 6px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 18px;
}
@media screen and (min-width: 768px) {
  .themes_responsiveTheme__cvta177 {
    --colors-backgroundColor__cvta171: purple;
    --colors-text__cvta172: pink;
  }
}",
  ],
]
`;

exports[`rollup-plugin should build with sourcemaps 1`] = `
[
  [
    "assets/src/shared.css.ts.vanilla-G_Gyt4-e.css",
    "",
  ],
  [
    "assets/src/styles.css.ts.vanilla-C7NI1Ovc.css",
    "",
  ],
  [
    "assets/src/themes.css.ts.vanilla-DMMXGwB8.css",
    "",
  ],
  [
    "src/index.js",
    ";;;;;;AAiBA,MAAM,WAAA,GAAc,iBAAiB,IAAM,EAAA;AAAA,EACzC,MAAQ,EAAA;AAAA,IACN,eAAiB,EAAA,QAAA;AAAA,IACjB,IAAM,EAAA,OAAA;AAAA,GACR;AAAA,EACA,KAAO,EAAA;AAAA,IACL,CAAG,EAAA,KAAA;AAAA,IACH,CAAG,EAAA,KAAA;AAAA,IACH,CAAG,EAAA,MAAA;AAAA,GACL;AACF,CAAC,CAAA,CAAA;AAED,SAAS,MAAS,GAAA;AAChB,EAAA,QAAA,CAAS,KAAK,SAAY,GAAA,CAAA;AAAA,WACf,EAAA,SAAA,CAAU,IAAI,CAAA,SAAA,EAAY,MAAM,CAAA;AAAA;AAAA,aAE9B,EAAA,SAAA,CAAU,aAAa,CAAA,SAAA,EAAY,SAAS,CAAA;AAAA,kBACvC,EAAA,SAAA,CAAU,UAAU,CAAA,SAAA,EAAY,MAAM,CAAA;AAAA,kBAAA,EACtC,QAAQ,CAAA;AAAA;AAAA,iBAET,EAAA,SAAA,CAAU,YAAY,CAAA,SAAA,EAAY,SAAS,CAAA;AAAA,sBACtC,EAAA,SAAA,CAAU,SAAS,CAAA,SAAA,EAAY,MAAM,CAAA;AAAA,sBAAA,EACrC,KAAK,CAAA;AAAA;AAAA,qBAEN,EAAA,SAAA,CAAU,mBAAmB,CAAA,SAAA,EAAY,SAAS,CAAA;AAAA,0BAC7C,EAAA,SAAA,CAAU,gBAAgB,CAAA,SAAA,EAAY,MAAM,CAAA;AAAA,wBAAA,EAC9C,WAAW,CAAA;AAAA;AAAA,yBAEV,EAAA,SAAA,CAAU,oBAAoB,CAAA,SAAA,EAAY,SAAS,CAAA;AAAA,8BAAA,EAC9C,UAAU,iBAAiB,CAAA,SAAA,EAAY,MAAM,CAAI,CAAA,EAAA,OAAA,CAAQ,KAAK,CAAC,CAAA;AAAA;AAAA;AAAA,6BAGhE,EAAA,SAAA,CAAU,oBAAoB,CAAA,SAAA,EAAY,SAAS,CAAA;AAAA,kCAC9C,EAAA,SAAA,CAAU,iBAAiB,CAAA,SAAA,EAAY,MAAM,CAAA;AAAA,8BAAA,EACjD,eAAe,CAAA;AAAA;AAAA,yBAEpB,EAAA,SAAA,CAAU,wBAAwB,CAAA,SAAA,EAAY,SAAS,CAAA;AAAA,8BAClD,EAAA,SAAA,CAAU,qBAAqB,CAAA,SAAA,EAAY,MAAM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA;AAiB/E,EAAA,MAAM,uBAAuB,QAAS,CAAA,cAAA;AAAA,IACpC,SAAU,CAAA,oBAAA;AAAA,GACZ,CAAA;AAEA,EAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,IAAM,MAAA,IAAI,MAAM,mCAAmC,CAAA,CAAA;AAAA,GACrD;AAEA,EAAA,cAAA,CAAe,sBAAsB,IAAM,EAAA;AAAA,IACzC,MAAQ,EAAA;AAAA,MACN,eAAiB,EAAA,aAAA;AAAA,MACjB,IAAM,EAAA,YAAA;AAAA,KACR;AAAA,IACA,KAAO,EAAA;AAAA,MACL,CAAG,EAAA,KAAA;AAAA,MACH,CAAG,EAAA,MAAA;AAAA,MACH,CAAG,EAAA,MAAA;AAAA,KACL;AAAA,GACD,CAAA,CAAA;AAED,EAAA,cAAA,CAAe,oBAAsB,EAAA;AAAA,IACnC,CAAC,IAAA,CAAK,MAAO,CAAA,eAAe,GAAG,YAAA;AAAA,GAChC,CAAA,CAAA;AACH,CAAA;AAEA,MAAO,EAAA",
  ],
  [
    "src/index.js.map",
    "",
  ],
  [
    "src/shared.css.js",
    ";;;;;;",
  ],
  [
    "src/shared.css.js.map",
    "",
  ],
  [
    "src/styles.css.js",
    ";;;;;;;;;;",
  ],
  [
    "src/styles.css.js.map",
    "",
  ],
  [
    "src/themes.css.js",
    ";;;;;;;;;",
  ],
  [
    "src/themes.css.js.map",
    "",
  ],
  [
    "test-nodes.json.js",
    ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  ],
  [
    "test-nodes.json.js.map",
    "",
  ],
]
`;

exports[`rollup-plugin should build without preserveModules 1`] = `
[
  [
    "assets/src/shared.css.ts.vanilla-G_Gyt4-e.css",
    ".shared_shadow__4dtfen0 {
  box-shadow: 0 0 5px red;
}
body {
  background-color: skyblue;
}
body, button {
  line-height: 16px;
}",
  ],
  [
    "assets/src/styles.css.ts.vanilla-C7NI1Ovc.css",
    "@font-face {
  src: local("Impact");
  font-family: "styles_impact__jteyb10";
}
@font-face {
  src: local("Comic Sans MS");
  font-family: MyGlobalComicSans;
}
.styles_container__jteyb11 {
  display: flex;
  flex-direction: column;
  gap: var(--space-2__cvta174);
  padding: var(--space-3__cvta175);
}
.styles_iDunno__jteyb12 {
  z-index: 1;
  position: relative;
}
.styles_button__jteyb13 {
  font-family: "styles_impact__jteyb10";
  background-color: var(--colors-backgroundColor__cvta171, "THIS FALLBACK VALUE SHOULD NEVER BE USED");
  color: var(--colors-text__cvta172);
  border-radius: 9999px;
}
.themes_altTheme__cvta176 .themes_theme__cvta170 .styles_container__jteyb11 .styles_button__jteyb13 {
  font-family: MyGlobalComicSans;
  outline: 5px solid red;
}
body .styles_iDunno__jteyb12:after {
  content: 'I am content';
}
html .styles_opacity_1\\/2__jteyb16 {
  opacity: var(--blankVar1__jteyb14, 0.5);
}
html .styles_opacity_1\\/4__jteyb17 {
  opacity: var(--blankVar1__jteyb14, var(--blankVar2__jteyb15, 0.25));
}
@media only screen and (min-width: 500px) {
  .styles_container__jteyb11 {
    border: 1px solid var(--colors-backgroundColor__cvta171);
  }
  .styles_button__jteyb13 {
    padding: var(--space-1__cvta173);
  }
}
@media only screen and (min-width: 1000px) {
  .styles_button__jteyb13 {
    padding: var(--space-2__cvta174);
  }
}",
  ],
  [
    "assets/src/themes.css.ts.vanilla-DMMXGwB8.css",
    ":root, .themes_theme__cvta170 {
  --colors-backgroundColor__cvta171: blue;
  --colors-text__cvta172: white;
  --space-1__cvta173: 4px;
  --space-2__cvta174: 8px;
  --space-3__cvta175: 12px;
}
.themes_altTheme__cvta176 {
  --colors-backgroundColor__cvta171: green;
  --colors-text__cvta172: white;
  --space-1__cvta173: 8px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 16px;
}
.themes_responsiveTheme__cvta177 {
  --colors-backgroundColor__cvta171: pink;
  --colors-text__cvta172: purple;
  --space-1__cvta173: 6px;
  --space-2__cvta174: 12px;
  --space-3__cvta175: 18px;
}
@media screen and (min-width: 768px) {
  .themes_responsiveTheme__cvta177 {
    --colors-backgroundColor__cvta171: purple;
    --colors-text__cvta172: pink;
  }
}",
  ],
  [
    "index.js",
    "import { assignInlineVars, setElementVars } from '@vanilla-extract/dynamic';
import './assets/src/themes.css.ts.vanilla-DMMXGwB8.css';
import './assets/src/shared.css.ts.vanilla-G_Gyt4-e.css';
import './assets/src/styles.css.ts.vanilla-C7NI1Ovc.css';

var altTheme = "themes_altTheme__cvta176";
var responsiveTheme = "themes_responsiveTheme__cvta177";
var theme = "themes_theme__cvta170";
var vars = { colors: { backgroundColor: "var(--colors-backgroundColor__cvta171)", text: "var(--colors-text__cvta172)" }, space: { "1": "var(--space-1__cvta173)", "2": "var(--space-2__cvta174)", "3": "var(--space-3__cvta175)" } };

var button = "styles_button__jteyb13 shared_shadow__4dtfen0 styles_iDunno__jteyb12";
var container = "styles_container__jteyb11";
var opacity = { "1/2": "styles_opacity_1/2__jteyb16", "1/4": "styles_opacity_1/4__jteyb17" };

var shadow = "shared_shadow__4dtfen0";

var root = "root";
var rootContainer = "rootContainer";
var rootButton = "rootButton";
var altContainer = "altContainer";
var altButton = "altButton";
var nestedRootContainer = "nestedRootContainer";
var nestedRootButton = "nestedRootButton";
var inlineThemeContainer = "inlineThemeContainer";
var inlineThemeButton = "inlineThemeButton";
var dynamicVarsContainer = "dynamicVarsContainer";
var dynamicVarsButton = "dynamicVarsButton";
var responsiveThemeContainer = "responsiveThemeContainer";
var responsiveThemeButton = "responsiveThemeButton";
var testNodes = {
	root: root,
	rootContainer: rootContainer,
	rootButton: rootButton,
	altContainer: altContainer,
	altButton: altButton,
	nestedRootContainer: nestedRootContainer,
	nestedRootButton: nestedRootButton,
	inlineThemeContainer: inlineThemeContainer,
	inlineThemeButton: inlineThemeButton,
	dynamicVarsContainer: dynamicVarsContainer,
	dynamicVarsButton: dynamicVarsButton,
	responsiveThemeContainer: responsiveThemeContainer,
	responsiveThemeButton: responsiveThemeButton
};

const inlineTheme = assignInlineVars(vars, {
  colors: {
    backgroundColor: "orange",
    text: "black"
  },
  space: {
    1: "4px",
    2: "8px",
    3: "12px"
  }
});
function render() {
  document.body.innerHTML = \`
  <div id="\${testNodes.root}" class="\${shadow}"> 
    Root theme
    <div id="\${testNodes.rootContainer}" class="\${container}">
      <button id="\${testNodes.rootButton}" class="\${button}">Main theme button</button>
      <div class="\${altTheme}"> 
        Alt theme
        <div id="\${testNodes.altContainer}" class="\${container}">
          <button id="\${testNodes.altButton}" class="\${button}">Alt theme button</button>
          <div class="\${theme}"> 
            Back to root theme
            <div id="\${testNodes.nestedRootContainer}" class="\${container}">
              <button id="\${testNodes.nestedRootButton}" class="\${button}">Main theme button</button>
            <div style="\${inlineTheme}">
              Inline theme
                <div id="\${testNodes.inlineThemeContainer}" class="\${container}">
                  <button id="\${testNodes.inlineThemeButton}" class="\${button} \${opacity["1/2"]}">Inline theme button</button>
                  <div>
                  Dynamic vars
                    <div id="\${testNodes.dynamicVarsContainer}" class="\${container}">
                      <button id="\${testNodes.dynamicVarsButton}" class="\${button}">Dynamic vars button</button>
                  <div class="\${responsiveTheme}">
              Responsive theme
                <div id="\${testNodes.responsiveThemeContainer}" class="\${container}">
                  <button id="\${testNodes.responsiveThemeButton}" class="\${button}">Responsive theme button</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
\`;
  const dynamicVarsContainer = document.getElementById(
    testNodes.dynamicVarsContainer
  );
  if (!dynamicVarsContainer) {
    throw new Error("Dynamic vars container not found.");
  }
  setElementVars(dynamicVarsContainer, vars, {
    colors: {
      backgroundColor: "transparent",
      text: "papayawhip"
    },
    space: {
      1: "5px",
      2: "10px",
      3: "15px"
    }
  });
  setElementVars(dynamicVarsContainer, {
    [vars.colors.backgroundColor]: "darksalmon"
  });
}
render();
",
  ],
]
`;
