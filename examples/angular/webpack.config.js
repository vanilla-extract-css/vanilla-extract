const { VanillaExtractPlugin } = require('@vanilla-extract/webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

// tl;dr - the Angular webpack loader doesn't support vanilla-extract files, so we need to exclude them from the loader and add a new loader for vanilla-extract files

// Note: if we could figure out how to add an "Emitter" to the Angular config that would handle .css.ts files that would likely be ideal, and would mean we wouldn't need to modify the Angular loader or add the babel loader.

// We have to use a function here as we need to override some of the Angular webpack config
module.exports = (config) => {
  // Add the Vanilla Extract plugin as per the docs
  config.plugins.push(new VanillaExtractPlugin());

  config.module.rules = config.module?.rules?.map((rule) => {
    // Modify angular loader so it doesn't error out on vanilla extract files
    // This match could be a little brittle?
    if (rule?.loader?.endsWith('@ngtools/webpack/src/ivy/index.js')) {
      (rule.exclude ||= []).push(/\.css\.ts$/);
    }

    // Modify existing css-loader so it doesn't match vanilla.css files
    if ('.css'.match(rule.test)) {
      (rule.exclude ||= []).push(/\.vanilla\.css$/);
    }

    return rule;
  });

  // If your config doesn't handle TS files, you'll need to add this for vanilla-extract (as we excluded them from the Angular loader)
  config.module?.rules.push({
    test: /\.css\.ts$/,
    exclude: /node_modules/,
    use: {
      loader: 'babel-loader',
      options: {
        presets: [
          '@babel/preset-typescript',
          ['@babel/preset-env', { targets: 'defaults' }],
        ],
      },
    },
  });

  // Add MiniCssExtract loader for vanilla-extract - as per the docs
  config.module?.rules.push({
    test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
    use: [
      MiniCssExtractPlugin.loader,
      {
        loader: require.resolve('css-loader'),
        options: {
          url: false, // Required as image imports should be handled via JS/TS import statements
        },
      },
    ],
  });

  return config;
};
